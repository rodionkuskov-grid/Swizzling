//
//  ViewController.swift
//  Swizzling
//
//  Created by Rodion Kuskov on 4/1/23.
//

import UIKit

class ViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        /* SomeFramework().printSun() */
    }

    @objc dynamic func printSunModified() {
        print("üåûüåû")
    }
}

extension SomeFramework {
    static func swizzleFrameworkFunction() {
        guard
            let originalMethod = class_getInstanceMethod(SomeFramework.self, #selector(SomeFramework.printSun)),
            let customMethod = class_getInstanceMethod(ViewController.self, #selector(ViewController.printSunModified))
        else { return }

        method_exchangeImplementations(originalMethod, customMethod)
    }
}

// MARK: - –ö–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫

class SomeFramework {
    private static var isSwizzleCompleted: Bool = false

    init() {
        guard !SomeFramework.isSwizzleCompleted else { return }
        swizzleFunctions()
    }
    
    // MARK: - –û—Ç–∫—Ä—ã—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
    @objc public dynamic func printSun() {
        print("üåû")
    }

    // MARK: - –ó–∞–∫—Ä—ã—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∫—É –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é printSun()
    /// –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–∂–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å dynamic keyword.
    @objc private dynamic func logAnalytics() {
        print("Logging analytics.")
        logAnalytics()
    }

    private func swizzleFunctions() {
        guard
            let originalMethod = class_getInstanceMethod(SomeFramework.self, #selector(SomeFramework.printSun)),
            let customMethod = class_getInstanceMethod(SomeFramework.self, #selector(SomeFramework.logAnalytics))
        else { return }

        method_exchangeImplementations(originalMethod, customMethod)
        SomeFramework.isSwizzleCompleted = true
    }
}
